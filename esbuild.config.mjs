import esbuild from "esbuild";
import process from "process";
import fs from "fs-extra";
import path from "path";
import builtins from "builtin-modules";

const targetDir = "L:/obsidian-test-llm/.obsidian/plugins/siga-plugin";
const filesToCopy = ["main.js", "manifest.json", "styles.css", "data.json"];

const copyFiles = async () => {
	for (const file of filesToCopy) {
		try {
			await fs.copy(file, path.join(targetDir, file), { overwrite: true });
			console.log(`Copied ${file} to ${targetDir}`);
		} catch (err) {
			console.error(`Error copying ${file}:`, err);
		}
	}
};

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	await copyFiles();
	process.exit(0);
} else {
	await context.watch();
	await copyFiles();
	console.log("Watching for changes...");
	
	// 监听文件变化
	fs.watch('.', { recursive: false }, async (eventType, filename) => {
		if (filesToCopy.includes(filename)) {
			try {
				await fs.copy(filename, path.join(targetDir, filename), { overwrite: true });
				console.log(`Updated ${filename} in ${targetDir}`);
			} catch (err) {
				console.error(`Error copying ${filename}:`, err);
			}
		}
	});
}
